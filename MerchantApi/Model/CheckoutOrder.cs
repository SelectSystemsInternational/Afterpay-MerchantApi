/* 
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// CheckoutOrder
    /// </summary>
    [DataContract]
    public partial class CheckoutOrder :  IEquatable<CheckoutOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckoutOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrder" /> class.
        /// </summary>
        /// <param name="Reference">The order id in the eCommerce system.</param>
        /// <param name="Amount">The total amount of the order (required).</param>
        /// <param name="Currency">The ISO-4217 currency code. See https://en.wikipedia.org/wiki/ISO_4217 (required).</param>
        /// <param name="Shipping">Shipping (required).</param>
        /// <param name="Items">The order item breakdown.</param>
        /// <param name="CartReference">The shopping cart reference id.</param>
        public CheckoutOrder(string Reference = default(string), decimal? Amount = default(decimal?), string Currency = default(string), OrderShipping Shipping = default(OrderShipping), List<OrderItem> Items = default(List<OrderItem>), string CartReference = default(string))
        {
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for CheckoutOrder and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "Currency" is required (not null)
            if (Currency == null)
            {
                throw new InvalidDataException("Currency is a required property for CheckoutOrder and cannot be null");
            }
            else
            {
                this.Currency = Currency;
            }
            // to ensure "Shipping" is required (not null)
            if (Shipping == null)
            {
                throw new InvalidDataException("Shipping is a required property for CheckoutOrder and cannot be null");
            }
            else
            {
                this.Shipping = Shipping;
            }
            this.Reference = Reference;
            this.Items = Items;
            this.CartReference = CartReference;
        }
        
        /// <summary>
        /// The order id in the eCommerce system
        /// </summary>
        /// <value>The order id in the eCommerce system</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }
        /// <summary>
        /// The total amount of the order
        /// </summary>
        /// <value>The total amount of the order</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// The ISO-4217 currency code. See https://en.wikipedia.org/wiki/ISO_4217
        /// </summary>
        /// <value>The ISO-4217 currency code. See https://en.wikipedia.org/wiki/ISO_4217</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public OrderShipping Shipping { get; set; }
        /// <summary>
        /// The order item breakdown
        /// </summary>
        /// <value>The order item breakdown</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<OrderItem> Items { get; set; }
        /// <summary>
        /// The shopping cart reference id
        /// </summary>
        /// <value>The shopping cart reference id</value>
        [DataMember(Name="cart_reference", EmitDefaultValue=false)]
        public string CartReference { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckoutOrder {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  CartReference: ").Append(CartReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CheckoutOrder);
        }

        /// <summary>
        /// Returns true if CheckoutOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of CheckoutOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutOrder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.CartReference == other.CartReference ||
                    this.CartReference != null &&
                    this.CartReference.Equals(other.CartReference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.CartReference != null)
                    hash = hash * 59 + this.CartReference.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Reference (string) maxLength
            if(this.Reference != null && this.Reference.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 200.", new [] { "Reference" });
            }

            // Amount (decimal?) minimum
            if(this.Amount < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.", new [] { "Amount" });
            }

            // CartReference (string) maxLength
            if(this.CartReference != null && this.CartReference.Length > 200)
            {
                yield return new ValidationResult("Invalid value for CartReference, length must be less than 200.", new [] { "CartReference" });
            }

            yield break;
        }
    }

}
