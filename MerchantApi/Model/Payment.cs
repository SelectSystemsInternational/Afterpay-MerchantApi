/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// Charge
    /// </summary>
    [DataContract]
    public partial class Payment :  IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Authorised for "Approved"
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            Approved,

            /// <summary>
            /// Enum Captured for "Declined"
            /// </summary>
            [EnumMember(Value = "DECLINED")]
            Declined
        }

        /// <summary>
        /// Gets or Sets An order 	Current state for capturing payments. 
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStateEnum
        {

            /// <summary>
            /// Enum Authorised for "Auth Approved"
            /// </summary>
            [EnumMember(Value = "AUTH_APPROVED")]
            AUTH_APPROVED,

            /// <summary>
            /// Enum Captured for "Auth declined"
            /// </summary>
            [EnumMember(Value = "AUTH_DECLINED")]
            AUTH_DECLINED,

            /// <summary>
            /// Enum Captured for "Partially captured"
            /// </summary>
            [EnumMember(Value = "PARTIALLY_CAPTURED")]
            PARTIALLY_CAPTURED,

            /// <summary>
            /// Enum Captured for "Captured"
            /// </summary>
            [EnumMember(Value = "CAPTURED")]
            CAPTURED,

            /// <summary>
            /// Enum Captured for "Capture declined"
            /// </summary>
            [EnumMember(Value = "CAPTURE_DECLINED")]
            CAPTURE_DECLINED,

            /// <summary>
            /// Enum Captured for "Voided"
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED,
        }

        /// <summary>
        /// Gets or Sets An order status of "APPROVED" or "DECLINED".
        /// </summary>
        [DataMember(Name = "paymentState", EmitDefaultValue = false)]
        public PaymentStateEnum? PaymentState { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Payment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="Id">he unique, permanent, Afterpay-generated Order ID.</param>
        /// <param name="Token">Checkout token that was used to complete payment.</param>
        /// <param name="Status">An order status.</param>
        /// <param name="Created">The UTC timestamp of when the payment was completed, in ISO 8601 format.</param>
        /// <param name="OriginalAmount">Total amount charged to the consumer for the order.</param>
        /// <param name="OpenToCaptureAmount">Remaining amount that can be captured. Will always be zero for Immediate Payment Flow orders.</param>
        /// <param name="PaymentState">Current state for capturing payments.</param>
        /// <param name="MerchantReference">The merchant's order id/reference that this payment corresponds to.</param>
        /// <param name="Order">Order.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="ReceiptNumber">ReceiptNumber (required).</param>
        public Payment(string Id = default(string), string Token = default(string), StatusEnum Status = default(StatusEnum), string Created = default(string), 
            Money OriginalAmount = default(Money), Money OpenToCaptureAmount = default(Money), PaymentStateEnum PaymentState = default(PaymentStateEnum), 
            string MerchantReference = default(string), List<Refund> Refunds = default (List<Refund>), OrderDetails OrderDetails = default (OrderDetails), List<PaymentEvent> Events = default (List<PaymentEvent>))
        {
            this.Id = Id;
            this.Token = Token;
            this.Created = Created;
            this.OriginalAmount = OriginalAmount;
            this.OpenToCaptureAmount = OpenToCaptureAmount;
            this.MerchantReference = MerchantReference;
            this.Refunds = Refunds;
            this.OrderDetails = OrderDetails;
            this.Events = Events;
        }

        /// <summary>
        /// Gets or Sets The unique, permanent, Afterpay-generated Order ID.
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Checkout token that was used to complete payment.
        /// </summary>
        [DataMember(Name= "token", EmitDefaultValue=false)]
        public string Token { get; set; }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name= "created", EmitDefaultValue=false)]
        public string Created { get; set; }
        /// <summary>
        /// Gets or Sets Total amount charged to the consumer for the order.
        /// </summary>
        [DataMember(Name= "originalAmount", EmitDefaultValue=false)]
        public Money OriginalAmount { get; set; }
        /// <summary>
        /// Gets or Sets Remaining amount that can be captured. 
        /// </summary>
        [DataMember(Name= "openToCaptureAmount", EmitDefaultValue=false)]
        public Money OpenToCaptureAmount { get; set; }
        /// <summary>
        /// Gets or Sets MerchantReference
        /// </summary>
        [DataMember(Name= "merchantReference", EmitDefaultValue=false)]
        public string MerchantReference { get; set; }
        /// <summary>
        /// Gets or Sets list of Refunds
        /// </summary>
        [DataMember(Name = "refunds", EmitDefaultValue = false)]
        public List<Refund> Refunds { get; set; }        /// <summary>
        /// Gets or Sets MerchantReference
        /// </summary>
        [DataMember(Name= "orderDetails", EmitDefaultValue=false)]
        public OrderDetails OrderDetails { get; set; }
        /// <summary>
        /// Gets or Sets MerchantReference
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<PaymentEvent> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Charge {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  OriginalAmount: ").Append(OriginalAmount).Append("\n");
            sb.Append("  OpenToCaptureAmount: ").Append(OpenToCaptureAmount).Append("\n");
            sb.Append("  PaymentState: ").Append(PaymentState).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  OrderDetails: ").Append(OrderDetails).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Payment);
        }

        /// <summary>
        /// Returns true if Charge instances are equal
        /// </summary>
        /// <param name="other">Instance of Charge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.OriginalAmount == other.OriginalAmount ||
                    this.OriginalAmount.Equals(other.OriginalAmount)
                ) && 
                (
                    this.OpenToCaptureAmount == other.OpenToCaptureAmount ||
                    this.OpenToCaptureAmount.Equals(other.OpenToCaptureAmount)
                ) && 
                (
                    this.PaymentState == other.PaymentState ||
                    this.PaymentState.Equals(other.PaymentState)
                ) && 
                (
                    this.MerchantReference == other.MerchantReference ||
                    this.MerchantReference != null &&
                    this.MerchantReference.Equals(other.MerchantReference)
                ) && 
                (
                    this.Refunds == other.Refunds ||
                    this.Refunds.Equals(other.Refunds)
                ) && 
                (
                    this.OrderDetails == other.OrderDetails ||
                    this.OrderDetails.Equals(other.OrderDetails)
                ) &&
                (
                    this.Events == other.Events ||
                    this.Events.Equals(other.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.OriginalAmount != null)
                    hash = hash * 59 + this.OriginalAmount.GetHashCode();
                if (this.OpenToCaptureAmount != null)
                    hash = hash * 59 + this.OpenToCaptureAmount.GetHashCode();
                if (this.PaymentState != null)
                    hash = hash * 59 + this.PaymentState.GetHashCode();
                if (this.MerchantReference != null)
                    hash = hash * 59 + this.MerchantReference.GetHashCode();
                if (this.Refunds != null)
                    hash = hash * 59 + this.Refunds.GetHashCode();
                if (this.OrderDetails != null)
                    hash = hash * 59 + this.OrderDetails.GetHashCode();
                if (this.Events != null)
                    hash = hash * 59 + this.Events.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
