/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class OrderCreateResponse :  IEquatable<OrderCreateResponse>, IValidatableObject
    {

        [JsonConstructorAttribute]
        protected OrderCreateResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrder" /> class.
        /// </summary>
        /// <param name="Token">Token (required).</param>
        /// <param name="ExpiryDateTime">ExpiryDateTime (required).</param>
        /// <param name="RedirectUrl">RedirectUrl.</param>
        /// <param name="OrderId">OrderId.</param>
        /// <param name="Warnings">Warnings.</param>
        /// <param name="Errors">Errors (required).</param>
        /// <param name="CustomerPairingTokenActive">CustomerPairingTokenActive.</param>
        public OrderCreateResponse(string Token = default(string), DateTime? ExpiryDateTime = default(DateTime?), 
            string RedirectUrl = default(string), string OrderId = default(string), string[] Warnings = default(string[]), 
            string[] Errors = default(string[]), bool CustomerPairingTokenActive = default(bool))
        {
            // to ensure "Token" is required (not null)
            if (Token == null)
            {
                throw new InvalidDataException("Token is a required property for Order and cannot be null");
            }
            else
            {
                this.Token = Token;
            }
            // to ensure "ExpiryDateTime" is required (not null)
            if (ExpiryDateTime == null)
            {
                throw new InvalidDataException("CreatedDate is a required property for Charge and cannot be null");
            }
            else
            {
                this.ExpiryDateTime = ExpiryDateTime;
            }
            // to ensure "RedirectUrl" is required (not null)
            if (RedirectUrl == null)
            {
                throw new InvalidDataException("RedirectUrl is a required property for Order and cannot be null");
            }
            else
            {
                this.RedirectUrl = RedirectUrl;
            }
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("RedirectUrl is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }


            this.Warnings = Warnings;
            this.Errors = Errors;
            this.CustomerPairingTokenActive = CustomerPairingTokenActive;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }
        /// <summary>
        /// Gets or Sets Billing Address
        /// </summary>
        [DataMember(Name= "expiryDateTime", EmitDefaultValue=false)]
        DateTime? ExpiryDateTime { get; set; }
        /// <summary>
        /// Gets or Sets Shipping Address;
        /// </summary>
        [DataMember(Name = "redirectUrl", EmitDefaultValue = false)]
        public string RedirectUrl { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }
        /// <summary>
        /// Gets or Sets Consumer
        /// </summary>
        [DataMember(Name= "warnings", EmitDefaultValue=false)]
        public string[] Warnings { get; set; }
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name= "errors", EmitDefaultValue=false)]
        public string[] Errors { get; set; }
        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name= "customerPairingTokenActive", EmitDefaultValue=false)]
        public bool CustomerPairingTokenActive { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderCreateResponse {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  ExpiryDateTime: ").Append(ExpiryDateTime).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  CustomerPairingTokenActive: ").Append(CustomerPairingTokenActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderCreateResponse);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCreateResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) &&
                (
                    this.ExpiryDateTime == other.ExpiryDateTime ||
                    this.ExpiryDateTime.Equals(other.ExpiryDateTime)
                ) &&
                (
                    this.RedirectUrl == other.RedirectUrl ||
                    this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(other.RedirectUrl)
                ) &&
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) &&
                (
                    this.Warnings == other.Warnings ||
                    this.Warnings.Equals(other.Warnings)
                ) &&
                (
                    this.Errors == other.Errors ||
                    this.Errors.Equals(other.Errors)
                ) &&
                (
                    this.CustomerPairingTokenActive == other.CustomerPairingTokenActive ||
                    this.CustomerPairingTokenActive.Equals(other.CustomerPairingTokenActive)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.ExpiryDateTime != null)
                    hash = hash * 59 + this.ExpiryDateTime.GetHashCode();
                if (this.RedirectUrl != null)
                    hash = hash * 59 + this.RedirectUrl.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.Warnings != null)
                    hash = hash * 59 + this.Warnings.GetHashCode();
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                hash = hash * 59 + this.CustomerPairingTokenActive.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
