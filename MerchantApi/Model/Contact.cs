/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// The Contact object
    /// </summary>
    [DataContract]
    public partial class Contact :  IEquatable<Contact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="Name">The Full name of contact (required).</param>/// 
        /// <param name="Line1">The first line in the address (required).</param>
        /// <param name="Line2">The (optional) second address line.</param>
        /// <param name="Area1">The address suburb, town or city.</param>
        /// <param name="Area2">The address suburb, town or city.</param>/// 
        /// <param name="Region">The address suburb or village region (required).</param>
        /// <param name="PostalCode">The post or zip code (required).</param>
        /// <param name="CountryCode">The ISO 3166-1 country code (required).</param>
        /// <param name="PhoneNumber">The phone number, in E.123 format.</param>/// 
        public Contact(string Name = default(string), string Line1 = default(string), string Line2 = default(string), string Area1 = default(string), string Area2 = default(string), 
            string Region = default(string), string PostCode = default(string), string CountryCode = default(string), string PhoneNumber = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Address and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Line1" is required (not null)
            if (Line1 == null)
            {
                throw new InvalidDataException("Line1 is a required property for Address and cannot be null");
            }
            else
            {
                this.Line1 = Line1;
            }
            // to ensure "Region" is required (not null)
            if (Region == null)
            {
                throw new InvalidDataException("Region is a required property for Address and cannot be null");
            }
            else
            {
                this.Region = Region;
            }
            // to ensure "PostalCode" is required (not null)
            if (PostCode == null)
            {
                throw new InvalidDataException("PostCode is a required property for Address and cannot be null");
            }
            else
            {
                this.PostCode = PostCode;
            }
            // to ensure "PostalCode" is required (not null)
            if (CountryCode == null)
            {
                throw new InvalidDataException("CountryCode is a required property for Address and cannot be null");
            }
            else
            {
                this.CountryCode = CountryCode;
            }
            this.Line2 = Line2;
            this.Area1 = Area1;
            this.Area2 = Area2;
            this.PhoneNumber = PhoneNumber;
        }

        /// <summary>
        /// The name in the address
        /// </summary>
        /// <value>The first line in the address</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }
        /// <summary>
        /// The first line in the address
        /// </summary>
        /// <value>The first line in the address</value>
        [DataMember(Name= "line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }
        /// <summary>
        /// The (optional) second address line
        /// </summary>
        /// <value>The (optional) second address line</value>
        [DataMember(Name= "line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }
        /// <summary>
        /// The address (optional) Area1
        /// </summary>
        /// <value>The address Area1</value>
        [DataMember(Name= "area1", EmitDefaultValue=false)]
        public string Area1 { get; set; }
        /// <summary>
        /// The address (optional) Area2
        /// </summary>
        /// <value>The address Area2</value>
        [DataMember(Name = "area2", EmitDefaultValue = false)]
        public string Area2 { get; set; }
        /// <summary>
        /// The address region
        /// </summary>
        /// <value>The region</value>
        [DataMember(Name= "region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// The post or zip code
        /// </summary>
        /// <value>The post or zip code</value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string PostCode { get; set; }
        /// <summary>
        /// The Country Code
        /// </summary>
        /// <value>The post or zip code</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// The recipient&#39;s first name
        /// </summary>
        /// <value>The recipient&#39;s first name</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Area1: ").Append(Area1).Append("\n");
            sb.Append("  Area2: ").Append(Area2).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Contact);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) &&
                (
                    this.Line1 == other.Line1 ||
                    this.Line1 != null &&
                    this.Line1.Equals(other.Line1)
                ) && 
                (
                    this.Line2 == other.Line2 ||
                    this.Line2 != null &&
                    this.Line2.Equals(other.Line2)
                ) && 
                (
                    this.Area1 == other.Area1 ||
                    this.Area1 != null &&
                    this.Area1.Equals(other.Area1)
                ) &&
                (
                    this.Area2 == other.Area2 ||
                    this.Area2 != null &&
                    this.Area2.Equals(other.Area2)
                ) &&
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.PostCode == other.PostCode ||
                    this.PostCode != null &&
                    this.PostCode.Equals(other.PostCode)
                ) &&
                 (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Line1 != null)
                    hash = hash * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hash = hash * 59 + this.Line2.GetHashCode();
                if (this.Area1 != null)
                    hash = hash * 59 + this.Area1.GetHashCode();
                if (this.Area2 != null)
                    hash = hash * 59 + this.Area2.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.PostCode != null)
                    hash = hash * 59 + this.PostCode.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] { "Name" });
            }

            // Line1 (string) maxLength
            if (this.Line1 != null && this.Line1.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Line1, length must be less than 128.", new [] { "Line1" });
            }

            // Line2 (string) maxLength
            if(this.Line2 != null && this.Line2.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Line2, length must be less than 128.", new [] { "Line2" });
            }

            // Area1 (string) maxLength
            if (this.Area1 != null && this.Area1.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Area1, length must be less than 128.", new[] { "Area1" });
            }

            // Area2 (string) maxLength
            if (this.Area2 != null && this.Area2.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Area1, length must be less than 128.", new[] { "Area2" });
            }

            // Region (string) maxLength
            if (this.Region != null && this.Region.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Region, length must be less than 128.", new [] { "Region" });
            }

            // PostalCode (string) maxLength
            if(this.PostCode != null && this.PostCode.Length > 128)
            {
                yield return new ValidationResult("Invalid value for PostCode, length must be less than 128.", new [] { "PostCode" });
            }

            // CountryCode (string) maxLength
            if (this.CountryCode != null && this.CountryCode.Length != 2)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be equal to 2.", new[] { "CountryCode" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 32)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 32.", new[] { "PhoneNumber" });
            }

            yield break;
        }
    }

}
