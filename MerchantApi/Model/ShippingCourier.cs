/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// Tracking information
    /// </summary>
    [DataContract]
    public partial class ShippingCourier : IEquatable<ShippingCourier>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {

            /// <summary>
            /// Enum Authorised for "Standard"
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            Standard,

            /// <summary>
            /// Enum Captured for "Express"
            /// </summary>
            [EnumMember(Value = "EXPRESS")]
            Express
        }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingCourier" /> class.
        /// </summary>
        /// <param name="ShippedAt">The date and time when the order was shipped, in ISO 8601 format.</param>
        /// <param name="Name">The name of the shipping courier.</param>
        /// <param name="Tracking">The shipping tracking number provided by the courier.</param>
        /// <param name="Priority">The shipping priority.</param>/// 
        public ShippingCourier(string ShippedAt = default(string), string Name = default(string), string Tracking = default(string), string Priority = default(string))
        {
            this.ShippedAt = ShippedAt;
            this.Name = Name;
            this.Tracking = Tracking;
            this.Priority = Priority;
        }

        /// <summary>
        /// Gets or Sets ShippedAt
        /// </summary>
        [DataMember(Name = "shippedAt", EmitDefaultValue = false)]
        public string ShippedAt { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Tracking
        /// </summary>
        [DataMember(Name = "tracking", EmitDefaultValue = false)]
        public string Tracking { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderShippingTracking {\n");
            sb.Append("  ShippedAt: ").Append(ShippedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ShippingCourier);
        }

        /// <summary>
        /// Returns true if OrderShippingTracking instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderShippingTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingCourier other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.ShippedAt == other.ShippedAt ||
                    this.ShippedAt != null &&
                    this.ShippedAt.Equals(other.ShippedAt)
                ) &&
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) &&
                (
                    this.Tracking == other.Tracking ||
                    this.Tracking != null &&
                    this.Tracking.Equals(other.Tracking)
                ) && (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShippedAt != null)
                    hash = hash * 59 + this.ShippedAt.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Tracking != null)
                    hash = hash * 59 + this.Tracking.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 128.", new[] { "Name" });
            }

            // Tracking (string) maxLength
            if (this.Tracking != null && this.Tracking.Length > 120)
            {
                yield return new ValidationResult("Invalid value for Tracking, length must be less than 128.", new[] { "Tracking" });
            }

            yield break;
        }
    }

}
