/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// Authority
    /// </summary>
    [DataContract]
    public partial class AuthorityRequest :  IEquatable<AuthorityRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of authority (checkout_id, account_token, store_code)
        /// </summary>
        /// <value>The type of authority (checkout_id, account_token, store_code)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum client_credentials for authorization token request
            /// </summary>
            [EnumMember(Value = "client_credentials")]
            ClientCredentials        
        }

        /// <summary>
        /// The type of authority (client_credentials)
        /// </summary>
        /// <value>The type of authority (checkout_id, account_token, store_code)</value>
        [DataMember(Name="grant_type", EmitDefaultValue=false)]
        public TypeEnum? GrantType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Authority" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorityRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Authority" /> class.
        /// </summary>
        /// <param name="Type">The type of authority (checkout_id, account_token, store_code) (required).</param>
        /// <param name="Value">The authority value/token (required).</param>
        public AuthorityRequest(TypeEnum? GrantType = default(TypeEnum?), string MerchantId = default(string), string MerchantSecretKey = default(string))
        {
            // to ensure "GrantType" is required (not null)
            if (GrantType == null)
            {
                throw new InvalidDataException("GrantType is a required property for Authority and cannot be null");
            }
            else
            {
                this.GrantType = GrantType;
            }
            // to ensure "MerchantId" is required (not null)
            if (MerchantId == null)
            {
                throw new InvalidDataException("MerchantId is a required property for Authority and cannot be null");
            }
            else
            {
                this.MerchantId = MerchantId;
            }
            // to ensure "MerchantSecretKey" is required (not null)
            if (MerchantSecretKey == null)
            {
                throw new InvalidDataException("MerchantSecretKey is a required property for Authority and cannot be null");
            }
            else
            {
                this.MerchantSecretKey = MerchantSecretKey;
            }
        }
        
        /// <summary>
        /// The authority value/token
        /// </summary>
        /// <value>The authority value/token</value>

        [DataMember(Name = "merchantid", EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        [DataMember(Name = "merchant_secret_key", EmitDefaultValue = false)]
        public string MerchantSecretKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Authority {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantSecretKey: ").Append(MerchantSecretKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AuthorityRequest);
        }

        /// <summary>
        /// Returns true if Authority instances are equal
        /// </summary>
        /// <param name="other">Instance of Authority to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorityRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GrantType == other.GrantType ||
                    this.GrantType != null &&
                    this.GrantType.Equals(other.GrantType)
                ) &&
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) &&
                (
                    this.MerchantSecretKey == other.MerchantSecretKey ||
                    this.MerchantSecretKey != null &&
                    this.MerchantSecretKey.Equals(other.MerchantSecretKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GrantType != null)
                    hash = hash * 59 + this.GrantType.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantSecretKey != null)
                    hash = hash * 59 + this.MerchantSecretKey.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
