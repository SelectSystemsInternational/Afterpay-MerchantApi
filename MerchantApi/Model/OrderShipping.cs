/* 
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// Shipping details
    /// </summary>
    [DataContract]
    public partial class OrderShipping :  IEquatable<OrderShipping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShipping" /> class.
        /// </summary>
        /// <param name="Pickup">States if the shipping method is pickup, otherwise the shipping address should be provided.</param>
        /// <param name="Tracking">Tracking.</param>
        /// <param name="Address">Address.</param>
        public OrderShipping(bool? Pickup = default(bool?), OrderShippingTracking Tracking = default(OrderShippingTracking), OrderAddress Address = default(OrderAddress))
        {
            this.Pickup = Pickup;
            this.Tracking = Tracking;
            this.Address = Address;
        }
        
        /// <summary>
        /// States if the shipping method is pickup, otherwise the shipping address should be provided
        /// </summary>
        /// <value>States if the shipping method is pickup, otherwise the shipping address should be provided</value>
        [DataMember(Name="pickup", EmitDefaultValue=false)]
        public bool? Pickup { get; set; }
        /// <summary>
        /// Gets or Sets Tracking
        /// </summary>
        [DataMember(Name="tracking", EmitDefaultValue=false)]
        public OrderShippingTracking Tracking { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public OrderAddress Address { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderShipping {\n");
            sb.Append("  Pickup: ").Append(Pickup).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderShipping);
        }

        /// <summary>
        /// Returns true if OrderShipping instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderShipping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderShipping other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pickup == other.Pickup ||
                    this.Pickup != null &&
                    this.Pickup.Equals(other.Pickup)
                ) && 
                (
                    this.Tracking == other.Tracking ||
                    this.Tracking != null &&
                    this.Tracking.Equals(other.Tracking)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pickup != null)
                    hash = hash * 59 + this.Pickup.GetHashCode();
                if (this.Tracking != null)
                    hash = hash * 59 + this.Tracking.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
