/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// The Checkout object
    /// </summary>
    [DataContract]
    public partial class Checkout:  IEquatable<Checkout>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Checkout" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Checkout() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Checkout" /> class.
        /// </summary>
        /// <param name="Token">	Checkout token to be used to complete payment. (required).</param>
        /// <param name="Expires">The UTC timestamp of when the checkout token will expire. (required).</param>
        /// <param name="RedirectCheckoutUrl">A URL that can be used to redirect the consumer to the Afterpay screenflow. (required).</param> 
        public Checkout(string Token = default(string), string Expires = default(string), string RedirectCheckoutUrl = default(string))
        {
            this.Token = Token;
            this.Expires = Expires;
            this.RedirectCheckoutUrl = RedirectCheckoutUrl;
        }
        /// <summary>
        /// The Checkout token to be used to complete payment.
        /// </summary>
        /// <value>The checkout id</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }
        /// <summary>
        /// The UTC timestamp of when the checkout token will expire, in ISO 8601 format.
        /// </summary>
        /// <value>The checkout id</value>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public string Expires { get; set; }
        /// <summary>
        /// A URL that can be used to redirect the consumer to the Afterpay screenflow.
        /// </summary>
        /// <value>The Redirect Checkout Url</value>
        [DataMember(Name = "redirectCheckoutUrl", EmitDefaultValue = false)]
        public string RedirectCheckoutUrl { get; set; }
          /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Checkout {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  RedirectCheckoutUrl: ").Append(RedirectCheckoutUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Checkout);
        }

        /// <summary>
        /// Returns true if Checkout instances are equal
        /// </summary>
        /// <param name="other">Instance of Checkout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Checkout other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.Expires == other.Expires ||
                    this.Expires != null &&
                    this.Expires.Equals(other.Expires)
                ) && 
                (
                    this.RedirectCheckoutUrl == other.RedirectCheckoutUrl ||
                    this.RedirectCheckoutUrl != null &&
                    this.RedirectCheckoutUrl.Equals(other.RedirectCheckoutUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.Expires != null)
                    hash = hash * 59 + this.Expires.GetHashCode();
                if (this.RedirectCheckoutUrl != null)
                    hash = hash * 59 + this.RedirectCheckoutUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
