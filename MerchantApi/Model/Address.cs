/* 
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// The address object
    /// </summary>
    [DataContract]
    public partial class Address :  IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="AddressLine1">The first line in the address (required).</param>
        /// <param name="AddressLine2">The (optional) second address line.</param>
        /// <param name="Suburb">The address suburb (required).</param>
        /// <param name="City">The address city.</param>
        /// <param name="PostalCode">The post or zip code (required).</param>
        /// <param name="State">The state or province (required).</param>

        public Address(string AddressLine1 = default(string), string AddressLine2 = default(string), string Suburb = default(string), string City = default(string), string PostCode = default(string), string State = default(string))
        {
            // to ensure "Line1" is required (not null)
            if (AddressLine1 == null)
            {
                throw new InvalidDataException("AddressLine1 is a required property for Address and cannot be null");
            }
            else
            {
                this.AddressLine1 = AddressLine1;
            }
            // to ensure "Suburb" is required (not null)
            if (Suburb == null)
            {
                throw new InvalidDataException("Suburb is a required property for Address and cannot be null");
            }
            else
            {
                this.Suburb = City;
            }
            // to ensure "City" is required (not null)
            if (City == null)
            {
                throw new InvalidDataException("City is a required property for Address and cannot be null");
            }
            else
            {
                this.City = City;
            }
            // to ensure "PostalCode" is required (not null)
            if (PostCode == null)
            {
                throw new InvalidDataException("PostCode is a required property for Address and cannot be null");
            }
            else
            {
                this.PostCode = PostCode;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for Address and cannot be null");
            }
            else
            {
                this.State = State;
            }
            this.AddressLine2 = AddressLine2;
        }
        
        /// <summary>
        /// The first line in the address
        /// </summary>
        /// <value>The first line in the address</value>
        [DataMember(Name= "addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The (optional) second address line
        /// </summary>
        /// <value>The (optional) second address line</value>
        [DataMember(Name= "addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The address Suburb
        /// </summary>
        /// <value>The address Suburb</value>
        [DataMember(Name= "suburb", EmitDefaultValue=false)]
        public string Suburb { get; set; }
        /// <summary>
        /// The state or province
        /// </summary>
        /// <value>The state or province</value>
        [DataMember(Name= "city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// The post or zip code
        /// </summary>
        /// <value>The post or zip code</value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string PostCode { get; set; }
        /// <summary>
        /// The recipient&#39;s first name
        /// </summary>
        /// <value>The recipient&#39;s first name</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AddressLine1 == other.AddressLine1 ||
                    this.AddressLine1 != null &&
                    this.AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    this.AddressLine2 == other.AddressLine2 ||
                    this.AddressLine2 != null &&
                    this.AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    this.Suburb == other.Suburb ||
                    this.Suburb != null &&
                    this.Suburb.Equals(other.Suburb)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.PostCode == other.PostCode ||
                    this.PostCode != null &&
                    this.PostCode.Equals(other.PostCode)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddressLine1 != null)
                    hash = hash * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hash = hash * 59 + this.AddressLine2.GetHashCode();
                if (this.Suburb != null)
                    hash = hash * 59 + this.Suburb.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.PostCode != null)
                    hash = hash * 59 + this.PostCode.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Line1 (string) maxLength
            if(this.AddressLine1 != null && this.AddressLine1.Length > 200)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 200.", new [] { "Line1" });
            }

            // Line2 (string) maxLength
            if(this.AddressLine2 != null && this.AddressLine2.Length > 200)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 200.", new [] { "Line2" });
            }

            // Country (string) maxLength
            if (this.Suburb != null && this.Suburb.Length > 2)
            {
                yield return new ValidationResult("Invalid value for Suburb, length must be less than 2.", new[] { "Country" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 50)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 50.", new [] { "City" });
            }

            // PostalCode (string) maxLength
            if(this.PostCode != null && this.PostCode.Length > 15)
            {
                yield return new ValidationResult("Invalid value for PostCode, length must be less than 15.", new [] { "PostCode" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 50)
            {
                yield return new ValidationResult("Invalid value for State, length must be less than 50.", new[] { "State" });
            }

            yield break;
        }
    }

}
