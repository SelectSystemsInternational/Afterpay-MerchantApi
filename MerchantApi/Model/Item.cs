/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// The Item object
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="Name">Product name (required).</param>
        /// <param name="Sku">Product SKU.</param>
        /// <param name="Quantity">The quantity of the item (required).</param>
        /// <param name="PageUrl">The canonical URL for the item's Product Detail Page.</param>
        /// <param name="ImageUrl">A URL for a web-optimised photo of the item, suitable for use directly as the src attribute of an img tag.</param>
        /// <param name="Price">The unit price of the individual item.</param>
        /// <param name="Categories">An array of arrays to accommodate multiple categories that apply to the item.</param> 
        public Item(string Name = default(string), string Sku = default(string), int Quantity = default(int), string PageUrl = default(string), 
            string ImageUrl = default(string), Money Price = default(Money), string [][] Categories = default(string [][]))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.Name = Name;
            }

            this.Sku = Sku;
            this.Quantity = Quantity;
            this.PageUrl = PageUrl;
            this.ImageUrl = ImageUrl;
            this.Price = Price;
            this.Categories = Categories;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int Quantity { get; set; }
        /// <summary>
        /// Gets or Sets PageUrl
        /// </summary>
        [DataMember(Name = "pageUrl", EmitDefaultValue = false)]
        public string PageUrl { get; set; }
        /// <summary>
        /// Gets or Sets PageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }
        /// <summary>
        /// Gets or Sets PageUrl
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public Money Price { get; set; }
        /// <summary>
        /// Gets or Sets PageUrl
        /// </summary>
        [DataMember(Name = "Categories", EmitDefaultValue = false)]
        public string [][] Categories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PageUrl: ").Append(PageUrl).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Item);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.PageUrl == other.PageUrl ||
                    this.PageUrl != null &&
                    this.PageUrl.Equals(other.PageUrl)
                ) &&
                (
                    this.ImageUrl == other.ImageUrl ||
                    this.ImageUrl != null &&
                    this.ImageUrl.Equals(other.ImageUrl)
                ) &&
                (
                    this.Price == other.Price ||
                    this.Price.Equals(other.Price)
                ) &&
                (
                    this.Categories == other.Categories ||
                    this.Categories != null &&
                    this.Categories.Equals(other.Categories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.PageUrl != null)
                    hash = hash * 59 + this.PageUrl.GetHashCode();
                if (this.ImageUrl != null)
                    hash = hash * 59 + this.ImageUrl.GetHashCode();
                if (this.PageUrl != null)
                    hash = hash * 59 + this.PageUrl.GetHashCode();
                hash = hash * 59 + this.Price.GetHashCode();
                if (this.Categories != null)
                    hash = hash * 59 + this.Categories.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
