/* 
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class CreateOrderRequest :  IEquatable<CreateOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {          
            /// <summary>
            /// Enum Sku for "sku"
            /// </summary>
            [EnumMember(Value = "Classic")]
            Classic,
            
            /// <summary>
            /// Enum Tax for "tax"
            /// </summary>
            [EnumMember(Value = "Plus")]
            Plus
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentFlowEnum
        {
            /// <summary>
            /// Enum Payment for "payment"
            /// </summary>
            [EnumMember(Value = "payment")]
            Payment,

            /// <summary>
            /// Enum Authorization for "auth"
            /// </summary>
            [EnumMember(Value = "auth")]
            Authorization
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name= "productType", EmitDefaultValue=false)]
        public TypeEnum? ProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderRequest" /> class.
        /// </summary>
        /// <param name="ProductType">ProductType (required).</param>
        /// <param name="Amount">Amount (required).</param>
        /// <param name="Consumer">Consumer.</param>
        /// <param name="Billing">Billing Address.</param>
        /// <param name="Shipping">Shipping Address.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Items">List of Order Items (required).</param>
        /// <param name="Merchant">Merchant.</param>
        /// <param name="MerchantReference">MerchantReference.</param>
        /// <param name="TaxAmount">TaxAmount.</param>
        /// <param name="ShippingAmount">ShippingAmount.</param>
        /// <param name="Token">Token.</param>
        /// <param name="Promotions">Promotions.</param>
        /// <param name="Pairing">Pairing.</param>
        /// <param name="PaymentFlow">PaymentFlow.</param>
        /// <param name="Metadata">Metadata.</param>
        public CreateOrderRequest(TypeEnum? ProductType = default(TypeEnum?), decimal? Amount = default(decimal?), Consumer Consumer = default(Consumer), OrderAddress Billing = default(OrderAddress), 
            OrderAddress Shipping = default(OrderAddress), string Description = default(string), List<OrderItem> Items = default(List<OrderItem>), Merchant Merchant = default(Merchant), 
            string MerchantReference = default(string), decimal? TaxAmount = default(decimal?), decimal? ShippingAmount = default(decimal?), 
            string Token = default(string), string[] Promotions = default(string[]), Pairing Pairing = default(Pairing), PaymentFlowEnum PaymentFlow = default(PaymentFlowEnum), 
            Metadata Metadata = default(Metadata))
        {
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for Order and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "MerchantReference" is required (not null)
            if (MerchantReference == null)
            {
                throw new InvalidDataException("MerchantReference is a required property for Order and cannot be null");
            }
            else
            {
                this.MerchantReference = MerchantReference;
            }      
            // Set PaymentFlow text value
            this.PaymentFlow = "payment";
            if (PaymentFlow == PaymentFlowEnum.Authorization)
            {
                this.PaymentFlow = "auth";
            }
            this.ProductType = ProductType;
            this.Amount = Amount;
            this.Billing = Billing;
            this.Shipping = Shipping;
            this.Consumer = Consumer;
            this.Items = Items;
            this.Merchant = Merchant;
            this.TaxAmount = TaxAmount;
            this.ShippingAmount = ShippingAmount;
            this.Token = Token;
            this.Promotions = Promotions;
            this.Pairing = Pairing;
            this.Metadata = Metadata;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// Gets or Sets Billing Address
        /// </summary>
        [DataMember(Name= "billing", EmitDefaultValue=false)]
        public OrderAddress Billing { get; set; }
        /// <summary>
        /// Gets or Sets Shipping Address;
        /// </summary>
        [DataMember(Name = "shipping", EmitDefaultValue = false)]
        public OrderAddress Shipping { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }
        /// <summary>
        /// Gets or Sets Consumer
        /// </summary>
        [DataMember(Name= "consumer", EmitDefaultValue=false)]
        public Consumer Consumer { get; set; }
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name= "items", EmitDefaultValue=false)]
        public List<OrderItem> Items { get; set; }
        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name= "merchant", EmitDefaultValue=false)]
        public Merchant Merchant { get; set; }
        /// <summary>
        /// Gets or Sets Tax Amount
        /// </summary>
        [DataMember(Name = "taxAmount", EmitDefaultValue = false)]
        public decimal? TaxAmount { get; set; }
        /// <summary>
        /// Gets or Sets Shipping Amount
        /// </summary>
        [DataMember(Name = "shippingAmount", EmitDefaultValue = false)]
        public decimal? ShippingAmount { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name= "description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "merchantReference", EmitDefaultValue = false)]
        public string MerchantReference { get; set; }
        /// <summary>
        /// Gets or Sets Promotions
        /// </summary>
        [DataMember(Name = "promotions", EmitDefaultValue = false)]
        public string[] Promotions { get; set; }
        /// <summary>
        /// Gets or Sets Pairing
        /// </summary>
        [DataMember(Name = "pairing", EmitDefaultValue = false)]
        public Pairing Pairing { get; set; }
        /// <summary>
        /// Gets or Sets PaymentFlow
        /// </summary>
        [DataMember(Name = "paymentFlow", EmitDefaultValue = false)]
        string PaymentFlow { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        Metadata Metadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Consumer: ").Append(Consumer).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  Pairing: ").Append(Pairing).Append("\n");
            sb.Append("  PaymentFlow: ").Append(PaymentFlow).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateOrderRequest);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrderRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProductType == other.ProductType ||
                    this.ProductType.Equals(other.ProductType)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Billing == other.Billing ||
                    this.Billing.Equals(other.Billing)
                ) &&
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping.Equals(other.Shipping)
                ) &&
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) &&
                (
                    this.MerchantReference == other.MerchantReference ||
                    this.MerchantReference != null &&
                    this.MerchantReference.Equals(other.MerchantReference)
                ) &&
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.Consumer == other.Consumer ||
                    this.Consumer.Equals(other.Consumer)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items.Equals(other.Items)
                ) && 
                (
                    this.Merchant == other.Merchant ||
                    this.Merchant.Equals(other.Merchant)
                ) &&
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount.Equals(other.TaxAmount)
                ) &&
                (
                    this.ShippingAmount == other.ShippingAmount ||
                    this.ShippingAmount.Equals(other.ShippingAmount)
                ) &&
                (
                    this.Promotions == other.Promotions ||
                    this.Promotions.Equals(other.Promotions)
                ) &&
                (
                    this.Pairing == other.Pairing ||
                    this.Pairing.Equals(other.Pairing)
                ) &&
                (
                    this.PaymentFlow == other.PaymentFlow ||
                    this.PaymentFlow.Equals(other.PaymentFlow)
                ) &&
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata.Equals(other.Metadata)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProductType != null)
                    hash = hash * 59 + this.ProductType.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Billing != null)
                    hash = hash * 59 + this.Billing.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.Consumer != null)
                    hash = hash * 59 + this.Consumer.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Merchant != null)
                    hash = hash * 59 + this.Merchant.GetHashCode();
                if (this.ShippingAmount != null)
                    hash = hash * 59 + this.ShippingAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.Promotions != null)
                    hash = hash * 59 + this.Promotions.GetHashCode();
                if (this.Pairing != null)
                    hash = hash * 59 + this.Pairing.GetHashCode();
                if (this.PaymentFlow != null)
                    hash = hash * 59 + this.PaymentFlow.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.MerchantReference != null)
                    hash = hash * 59 + this.MerchantReference.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
