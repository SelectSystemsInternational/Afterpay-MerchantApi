/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace MerchantApi.Model
{
    /// <summary>
    /// The checkout request
    /// </summary>
    [DataContract]
    public partial class OrderDetails :  IEquatable<OrderDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCheckoutRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCheckoutRequest" /> class.
        /// </summary>
        /// <param name="Amount">The total amount for order to be charged to consumer. (required).</param>
        /// <param name="Consumer">The consumer who placed or is placing the order.. (required).</param>
        /// <param name="Billing">The consumer's billing address.</param>
        /// <param name="Shipping">The consumer's shipping address.</param>
        /// <param name="Courier">The Shipping Courier details.</param>
        /// <param name="Items">An array of order items.</param>
        /// <param name="Discounts">An array of discounts.</param>
        /// <param name="Merchant">The merchant urls.</param>
        /// <param name="MerchantReference">The merchant’s id/reference that this order corresponds to.</param>
        /// <param name="TaxAmount">The included tax amount after applying all discounts.</param>
        /// <param name="ShippingAmount">The shipping amount.</param>
        public OrderDetails(Money Amount = default(Money), Consumer Consumer = default(Consumer), Contact Billing = default(Contact), Contact Shipping = default(Contact), ShippingCourier Courier = default(ShippingCourier),  
            List<Item> Items = default(List<Item>), List<Discount> Discounts = default (List<Discount>), Merchant Merchant = default (Merchant), string MerchantReference = default(string), Money TaxAmount = default(Money), Money ShippingAmount = default(Money))
        {
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for Checkout and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "Consumer" is required (not null)
            if (Consumer == null)
            {
                throw new InvalidDataException("Consumer is a required property for Checkout and cannot be null");
            }
            else
            {
                this.Consumer = Consumer;
            }
            // to ensure "Billing" is required (not null)
            if (Billing == null)
            {
                throw new InvalidDataException("Billing is a required property for Checkout and cannot be null");
            }
            else
            {
                this.Billing = Billing;
            }
            // to ensure "Shipping" is required (not null)
            if (Shipping == null)
            {
                throw new InvalidDataException("Shipping is a required property for Checkout and cannot be null");
            }
            else
            {
                this.Shipping = Shipping;
            }
            
            this.Courier = Courier;
            this.Items = Items;
            this.Discounts = Discounts;
            this.Merchant = Merchant;
            this.MerchantReference = MerchantReference;
            this.TaxAmount = TaxAmount;
            this.ShippingAmount = ShippingAmount;
        }

        /// <summary>
        /// The order Amount
        /// </summary>
        /// <value>The checkout id</value>
        [DataMember(Name= "amount", EmitDefaultValue=false)]
        public Money Amount { get; set; }
        /// <summary>
        /// Gets or Sets Consumer
        /// </summary>
        [DataMember(Name= "consumer", EmitDefaultValue=false)]
        public Consumer Consumer { get; set; }
        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name= "billing", EmitDefaultValue=false)]
        public Contact Billing { get; set; }
        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name= "shipping", EmitDefaultValue=false)]
        public Contact Shipping { get; set; }
        /// <summary>
        /// Gets or Sets Courier
        /// </summary>
        [DataMember(Name= "courier", EmitDefaultValue=false)]
        public ShippingCourier Courier { get; set; }
        /// <summary>
        /// Gets or Sets list of order Items
        /// </summary>
        /// <value>Date the checkout was created</value>
        [DataMember(Name= "items", EmitDefaultValue=false)]
        public List<Item> Items { get; set; }
        /// <summary>
        /// Gets or Sets list of order discounts
        /// </summary>
        [DataMember(Name= "discount", EmitDefaultValue=false)]
        public List<Discount> Discounts { get; set; }
        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name= "merchant", EmitDefaultValue=false)]
        public Merchant Merchant { get; set; }
        /// <summary>
        /// Gets or Sets Merchant Reference
        /// </summary>
        [DataMember(Name = "merchantReference", EmitDefaultValue = false)]
        public string MerchantReference { get; set; }
        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name = "taxAmount", EmitDefaultValue = false)]
        public Money TaxAmount { get; set; }
        /// <summary>
        /// Gets or Sets ShippingAmount
        /// </summary>
        [DataMember(Name = "shippingAmount", EmitDefaultValue = false)]
        public Money ShippingAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDetails {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Consumer: ").Append(Consumer).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Courier: ").Append(Courier).Append("\n");
            if (Items != null)
            {
                foreach (var i in Items)
                    sb.Append("  Item: ").Append(i.ToString()).Append("\n");
            }
            if (Discounts != null)
            {
                foreach (var d in Discounts)
                    sb.Append("  Discount: ").Append(d.ToString()).Append("\n");
            }
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderDetails);
        }

        /// <summary>
        /// Returns true if Checkout instances are equal
        /// </summary>
        /// <param name="other">Instance of Checkout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Consumer == other.Consumer ||
                    this.Consumer != null &&
                    this.Consumer.Equals(other.Consumer)
                ) && 
                (
                    this.Billing == other.Billing ||
                    this.Billing != null &&
                    this.Billing.Equals(other.Billing)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                ) && 
                (
                    this.Courier == other.Courier ||
                    this.Courier != null &&
                    this.Courier.Equals(other.Courier)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.Equals(other.Items)
                ) && 
                (
                    this.Discounts == other.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.Equals(other.Discounts)
                ) && 
                (
                    this.Merchant == other.Merchant ||
                    this.Merchant != null &&
                    this.Merchant.Equals(other.Merchant)
                ) &&
                (
                    this.MerchantReference == other.MerchantReference ||
                    this.MerchantReference != null &&
                    this.MerchantReference.Equals(other.MerchantReference)
                ) &&
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.ShippingAmount == other.ShippingAmount ||
                    this.ShippingAmount != null &&
                    this.ShippingAmount.Equals(other.ShippingAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Consumer != null)
                    hash = hash * 59 + this.Consumer.GetHashCode();
                if (this.Billing != null)
                    hash = hash * 59 + this.Billing.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.Courier != null)
                    hash = hash * 59 + this.Courier.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Discounts != null)
                    hash = hash * 59 + this.Discounts.GetHashCode();
                if (this.Merchant != null)
                    hash = hash * 59 + this.Merchant.GetHashCode();
                if (this.MerchantReference != null)
                    hash = hash * 59 + this.MerchantReference.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.ShippingAmount != null)
                    hash = hash * 59 + this.ShippingAmount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
