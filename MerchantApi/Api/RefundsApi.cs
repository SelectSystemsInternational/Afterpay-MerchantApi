/* 
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MerchantApi.Client;
using MerchantApi.Model;

namespace MerchantApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a refund
        /// </summary>
        /// <remarks>
        /// Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Refund</returns>
        RefundOrder RefundsCreate (CreateRefundRequest body = null, string idempotencyKey = null);

        /// <summary>
        /// Create a refund
        /// </summary>
        /// <remarks>
        /// Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Refund</returns>
        ApiResponse<RefundOrder> RefundsCreateWithHttpInfo (CreateRefundRequest body = null, string idempotencyKey = null);
        /// <summary>
        /// List refunds
        /// </summary>
        /// <remarks>
        /// List all refunds
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> RefundsList (string chargeId = null, int? skip = null, int? limit = null);

        /// <summary>
        /// List refunds
        /// </summary>
        /// <remarks>
        /// List all refunds
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> RefundsListWithHttpInfo (string chargeId = null, int? skip = null, int? limit = null);
        /// <summary>
        /// Retrieve a refund
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific refund
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>Refund</returns>
        RefundOrder RefundsRetrieve (string id);

        /// <summary>
        /// Retrieve a refund
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific refund
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>ApiResponse of Refund</returns>
        ApiResponse<RefundOrder> RefundsRetrieveWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a refund
        /// </summary>
        /// <remarks>
        /// Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Refund</returns>
        System.Threading.Tasks.Task<RefundOrder> RefundsCreateAsync (CreateRefundRequest body = null, string idempotencyKey = null);

        /// <summary>
        /// Create a refund
        /// </summary>
        /// <remarks>
        /// Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundOrder>> RefundsCreateAsyncWithHttpInfo (CreateRefundRequest body = null, string idempotencyKey = null);
        /// <summary>
        /// List refunds
        /// </summary>
        /// <remarks>
        /// List all refunds
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> RefundsListAsync (string chargeId = null, int? skip = null, int? limit = null);

        /// <summary>
        /// List refunds
        /// </summary>
        /// <remarks>
        /// List all refunds
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> RefundsListAsyncWithHttpInfo (string chargeId = null, int? skip = null, int? limit = null);
        /// <summary>
        /// Retrieve a refund
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific refund
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>Task of Refund</returns>
        System.Threading.Tasks.Task<RefundOrder> RefundsRetrieveAsync (string id);

        /// <summary>
        /// Retrieve a refund
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific refund
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundOrder>> RefundsRetrieveAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RefundsApi : IRefundsApi
    {
        private MerchantApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefundsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = MerchantApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RefundsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MerchantApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MerchantApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a refund Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Refund</returns>
        public RefundOrder RefundsCreate (CreateRefundRequest body = null, string idempotencyKey = null)
        {
             ApiResponse<RefundOrder> localVarResponse = RefundsCreateWithHttpInfo(body, idempotencyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a refund Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Refund</returns>
        public ApiResponse< RefundOrder > RefundsCreateWithHttpInfo (CreateRefundRequest body = null, string idempotencyKey = null)
        {

            var localVarPath = "/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundOrder)));
            
        }

        /// <summary>
        /// Create a refund Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Refund</returns>
        public async System.Threading.Tasks.Task<RefundOrder> RefundsCreateAsync (CreateRefundRequest body = null, string idempotencyKey = null)
        {
             ApiResponse<RefundOrder> localVarResponse = await RefundsCreateAsyncWithHttpInfo(body, idempotencyKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a refund Creates a refund for a previously authorised or captured charge. See #model:xWJer4QQyRumRi9LD for more information.  This endpoint will return 201 or otherwise 402 if unable to perform the refund.   | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_inoperative | The account is in arrears or closed and cannot be charged | | amount_invalid | The refund amount is greater than the remaining captured total | | invalid_state | 1. The charge is already fully refunded |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefundOrder>> RefundsCreateAsyncWithHttpInfo (CreateRefundRequest body = null, string idempotencyKey = null)
        {

            var localVarPath = "/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundOrder)));
            
        }

        /// <summary>
        /// List refunds List all refunds
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> RefundsList (string chargeId = null, int? skip = null, int? limit = null)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = RefundsListWithHttpInfo(chargeId, skip, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List refunds List all refunds
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > RefundsListWithHttpInfo (string chargeId = null, int? skip = null, int? limit = null)
        {

            var localVarPath = "/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargeId != null) localVarQueryParams.Add("chargeId", Configuration.ApiClient.ParameterToString(chargeId)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        /// List refunds List all refunds
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> RefundsListAsync (string chargeId = null, int? skip = null, int? limit = null)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await RefundsListAsyncWithHttpInfo(chargeId, skip, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List refunds List all refunds
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeId"> (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> RefundsListAsyncWithHttpInfo (string chargeId = null, int? skip = null, int? limit = null)
        {

            var localVarPath = "/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargeId != null) localVarQueryParams.Add("chargeId", Configuration.ApiClient.ParameterToString(chargeId)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        /// Retrieve a refund Retrieves details of a specific refund
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>Refund</returns>
        public RefundOrder RefundsRetrieve (string id)
        {
             ApiResponse<RefundOrder> localVarResponse = RefundsRetrieveWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a refund Retrieves details of a specific refund
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>ApiResponse of Refund</returns>
        public ApiResponse< RefundOrder > RefundsRetrieveWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RefundsApi->RefundsRetrieve");

            var localVarPath = "/refunds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundsRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundOrder)));
            
        }

        /// <summary>
        /// Retrieve a refund Retrieves details of a specific refund
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>Task of Refund</returns>
        public async System.Threading.Tasks.Task<RefundOrder> RefundsRetrieveAsync (string id)
        {
             ApiResponse<RefundOrder> localVarResponse = await RefundsRetrieveAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a refund Retrieves details of a specific refund
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the refund</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefundOrder>> RefundsRetrieveAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RefundsApi->RefundsRetrieve");

            var localVarPath = "/refunds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundsRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundOrder)));
            
        }

    }
}
