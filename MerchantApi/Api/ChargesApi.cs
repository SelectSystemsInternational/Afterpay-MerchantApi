/* 
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MerchantApi.Client;
using MerchantApi.Model;

namespace MerchantApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a charge
        /// </summary>
        /// <remarks>
        /// Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Charge</returns>
        Charge ChargesCancel (string id, string idempotencyKey = null);

        /// <summary>
        /// Cancel a charge
        /// </summary>
        /// <remarks>
        /// Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        ApiResponse<Charge> ChargesCancelWithHttpInfo (string id, string idempotencyKey = null);
        /// <summary>
        /// Capture a charge
        /// </summary>
        /// <remarks>
        /// | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Charge</returns>
        Charge ChargesCapture (string id, CaptureChargeRequest body = null, string idempotencyKey = null);

        /// <summary>
        /// Capture a charge
        /// </summary>
        /// <remarks>
        /// | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        ApiResponse<Charge> ChargesCaptureWithHttpInfo (string id, CaptureChargeRequest body = null, string idempotencyKey = null);
        /// <summary>
        /// Create a charge
        /// </summary>
        /// <remarks>
        /// Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Charge</returns>
        Charge ChargesCreate (CreateChargeRequest body = null, string idempotencyKey = null);

        /// <summary>
        /// Create a charge
        /// </summary>
        /// <remarks>
        /// Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        ApiResponse<Charge> ChargesCreateWithHttpInfo (CreateChargeRequest body = null, string idempotencyKey = null);
        /// <summary>
        /// List charges
        /// </summary>
        /// <remarks>
        /// Lists all charges matching search criteria.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>ChargeCollection</returns>
        ChargeCollection ChargesList (string state = null, int? skip = null, int? limit = null, string expand = null);

        /// <summary>
        /// List charges
        /// </summary>
        /// <remarks>
        /// Lists all charges matching search criteria.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>ApiResponse of ChargeCollection</returns>
        ApiResponse<ChargeCollection> ChargesListWithHttpInfo (string state = null, int? skip = null, int? limit = null, string expand = null);
        /// <summary>
        /// Retrieve a charge
        /// </summary>
        /// <remarks>
        /// Retrieve details of a previously created charge.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Charge</returns>
        Charge ChargesRetrieve (string id, string expand = null);

        /// <summary>
        /// Retrieve a charge
        /// </summary>
        /// <remarks>
        /// Retrieve details of a previously created charge.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        ApiResponse<Charge> ChargesRetrieveWithHttpInfo (string id, string expand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a charge
        /// </summary>
        /// <remarks>
        /// Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Charge</returns>
        System.Threading.Tasks.Task<Charge> ChargesCancelAsync (string id, string idempotencyKey = null);

        /// <summary>
        /// Cancel a charge
        /// </summary>
        /// <remarks>
        /// Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesCancelAsyncWithHttpInfo (string id, string idempotencyKey = null);
        /// <summary>
        /// Capture a charge
        /// </summary>
        /// <remarks>
        /// | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Charge</returns>
        System.Threading.Tasks.Task<Charge> ChargesCaptureAsync (string id, CaptureChargeRequest body = null, string idempotencyKey = null);

        /// <summary>
        /// Capture a charge
        /// </summary>
        /// <remarks>
        /// | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesCaptureAsyncWithHttpInfo (string id, CaptureChargeRequest body = null, string idempotencyKey = null);
        /// <summary>
        /// Create a charge
        /// </summary>
        /// <remarks>
        /// Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Charge</returns>
        System.Threading.Tasks.Task<Charge> ChargesCreateAsync (CreateChargeRequest body = null, string idempotencyKey = null);

        /// <summary>
        /// Create a charge
        /// </summary>
        /// <remarks>
        /// Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesCreateAsyncWithHttpInfo (CreateChargeRequest body = null, string idempotencyKey = null);
        /// <summary>
        /// List charges
        /// </summary>
        /// <remarks>
        /// Lists all charges matching search criteria.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of ChargeCollection</returns>
        System.Threading.Tasks.Task<ChargeCollection> ChargesListAsync (string state = null, int? skip = null, int? limit = null, string expand = null);

        /// <summary>
        /// List charges
        /// </summary>
        /// <remarks>
        /// Lists all charges matching search criteria.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of ApiResponse (ChargeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargeCollection>> ChargesListAsyncWithHttpInfo (string state = null, int? skip = null, int? limit = null, string expand = null);
        /// <summary>
        /// Retrieve a charge
        /// </summary>
        /// <remarks>
        /// Retrieve details of a previously created charge.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of Charge</returns>
        System.Threading.Tasks.Task<Charge> ChargesRetrieveAsync (string id, string expand = null);

        /// <summary>
        /// Retrieve a charge
        /// </summary>
        /// <remarks>
        /// Retrieve details of a previously created charge.
        /// </remarks>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesRetrieveAsyncWithHttpInfo (string id, string expand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChargesApi : IChargesApi
    {
        private MerchantApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = MerchantApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChargesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MerchantApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MerchantApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel a charge Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Charge</returns>
        public Charge ChargesCancel (string id, string idempotencyKey = null)
        {
             ApiResponse<Charge> localVarResponse = ChargesCancelWithHttpInfo(id, idempotencyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a charge Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        public ApiResponse< Charge > ChargesCancelWithHttpInfo (string id, string idempotencyKey = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargesApi->ChargesCancel");

            var localVarPath = "/charges/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

        /// <summary>
        /// Cancel a charge Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Charge</returns>
        public async System.Threading.Tasks.Task<Charge> ChargesCancelAsync (string id, string idempotencyKey = null)
        {
             ApiResponse<Charge> localVarResponse = await ChargesCancelAsyncWithHttpInfo(id, idempotencyKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a charge Cancels an authorised charge.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesCancelAsyncWithHttpInfo (string id, string idempotencyKey = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargesApi->ChargesCancel");

            var localVarPath = "/charges/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

        /// <summary>
        /// Capture a charge | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Charge</returns>
        public Charge ChargesCapture (string id, CaptureChargeRequest body = null, string idempotencyKey = null)
        {
             ApiResponse<Charge> localVarResponse = ChargesCaptureWithHttpInfo(id, body, idempotencyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Capture a charge | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        public ApiResponse< Charge > ChargesCaptureWithHttpInfo (string id, CaptureChargeRequest body = null, string idempotencyKey = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargesApi->ChargesCapture");

            var localVarPath = "/charges/{id}/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesCapture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

        /// <summary>
        /// Capture a charge | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Charge</returns>
        public async System.Threading.Tasks.Task<Charge> ChargesCaptureAsync (string id, CaptureChargeRequest body = null, string idempotencyKey = null)
        {
             ApiResponse<Charge> localVarResponse = await ChargesCaptureAsyncWithHttpInfo(id, body, idempotencyKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Capture a charge | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | amount_invalid | Capture amount greater than authorised amount | | invalid_state | The charge is not in authorised state |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the authorised charge</param>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesCaptureAsyncWithHttpInfo (string id, CaptureChargeRequest body = null, string idempotencyKey = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargesApi->ChargesCapture");

            var localVarPath = "/charges/{id}/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesCapture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

        /// <summary>
        /// Create a charge Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Charge</returns>
        public Charge ChargesCreate (CreateChargeRequest body = null, string idempotencyKey = null)
        {
             ApiResponse<Charge> localVarResponse = ChargesCreateWithHttpInfo(body, idempotencyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a charge Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        public ApiResponse< Charge > ChargesCreateWithHttpInfo (CreateChargeRequest body = null, string idempotencyKey = null)
        {

            var localVarPath = "/charges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

        /// <summary>
        /// Create a charge Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of Charge</returns>
        public async System.Threading.Tasks.Task<Charge> ChargesCreateAsync (CreateChargeRequest body = null, string idempotencyKey = null)
        {
             ApiResponse<Charge> localVarResponse = await ChargesCreateAsyncWithHttpInfo(body, idempotencyKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a charge Creates a #model:ehEN48PET29iNdex3 which represents a charge against a customer&#39;s account.  To execute this endpoint you must first obtain customer approval by implementing the #docTextSection:43C79g2JjeGs8AHWi as a part of your online store.  This endpoint will return 201 if successful otherwise 402 with a specific error response.  ## Capture or authorisation  A charge can be created as either an authorisation or an immediate capture. This can be controlled in the initial request to the charge.  In most cases you will want to immediately capture the payment, this will mark the debit for settlement into your account the very same day and will immediately deduct the funds from the customer&#39;s account.  In some cases you may wish to delay the settlement of funds until a later date, perhaps until the goods are shipped to the customer. In this scenario you should send { capture: false } in the request to the #endpoint:dtmp3HxaHKjewvvGW endpoint and the charge will be created in an authorised state.  An authorised charge will place a hold for the specified amount on the customer&#39;s account in the form of a pending debit. Once authorised you are guaranteed the funds are available and awaiting a capture request to the #endpoint:wReod3JtbzNutMSXj endpoint, at which point the charge will move to the captured state and the funds will be settled into your account. It is at this point the customer&#39;s interest free period will start if applicable for the selected account.  ## Specific error responses  If a charge was not able to be performed a \&quot;402 - Request Failed\&quot; status code will be returned as detailed in #docTextSection:fJYHM2ZKtEui8RrAM. The error object can contain more specific error reason codes, which are detailed below.  | Error code | Description | |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | account_insufficient_funds | Customer does not have sufficient funds to perform the charge | | account_inoperative | The account is in arrears or closed and cannot be charged | | account_locked | The account is locked | | amount_invalid | The amount provided does not match the approved checkout amount | | fraud_check | Fraud checks resulted in payment failure |
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="idempotencyKey">The unique idempotency key. (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesCreateAsyncWithHttpInfo (CreateChargeRequest body = null, string idempotencyKey = null)
        {

            var localVarPath = "/charges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idempotencyKey != null) localVarHeaderParams.Add("Idempotency-Key", Configuration.ApiClient.ParameterToString(idempotencyKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

        /// <summary>
        /// List charges Lists all charges matching search criteria.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>ChargeCollection</returns>
        public ChargeCollection ChargesList (string state = null, int? skip = null, int? limit = null, string expand = null)
        {
             ApiResponse<ChargeCollection> localVarResponse = ChargesListWithHttpInfo(state, skip, limit, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List charges Lists all charges matching search criteria.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>ApiResponse of ChargeCollection</returns>
        public ApiResponse< ChargeCollection > ChargesListWithHttpInfo (string state = null, int? skip = null, int? limit = null, string expand = null)
        {

            var localVarPath = "/charges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (expand != null) localVarQueryParams.Add("expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargeCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargeCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargeCollection)));
            
        }

        /// <summary>
        /// List charges Lists all charges matching search criteria.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of ChargeCollection</returns>
        public async System.Threading.Tasks.Task<ChargeCollection> ChargesListAsync (string state = null, int? skip = null, int? limit = null, string expand = null)
        {
             ApiResponse<ChargeCollection> localVarResponse = await ChargesListAsyncWithHttpInfo(state, skip, limit, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List charges Lists all charges matching search criteria.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The state filter (optional)</param>
        /// <param name="skip">Number of items to skip when paging (optional, default to 0)</param>
        /// <param name="limit">Number of items to retrieve when paging (optional, default to 100)</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of ApiResponse (ChargeCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargeCollection>> ChargesListAsyncWithHttpInfo (string state = null, int? skip = null, int? limit = null, string expand = null)
        {

            var localVarPath = "/charges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (expand != null) localVarQueryParams.Add("expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargeCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargeCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargeCollection)));
            
        }

        /// <summary>
        /// Retrieve a charge Retrieve details of a previously created charge.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Charge</returns>
        public Charge ChargesRetrieve (string id, string expand = null)
        {
             ApiResponse<Charge> localVarResponse = ChargesRetrieveWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a charge Retrieve details of a previously created charge.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>ApiResponse of Charge</returns>
        public ApiResponse< Charge > ChargesRetrieveWithHttpInfo (string id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargesApi->ChargesRetrieve");

            var localVarPath = "/charges/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.Add("expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

        /// <summary>
        /// Retrieve a charge Retrieve details of a previously created charge.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of Charge</returns>
        public async System.Threading.Tasks.Task<Charge> ChargesRetrieveAsync (string id, string expand = null)
        {
             ApiResponse<Charge> localVarResponse = await ChargesRetrieveAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a charge Retrieve details of a previously created charge.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the charge</param>
        /// <param name="expand">Allows expanding related entities in the response. Only valid entry is &#39;customer&#39; (optional)</param>
        /// <returns>Task of ApiResponse (Charge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Charge>> ChargesRetrieveAsyncWithHttpInfo (string id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargesApi->ChargesRetrieve");

            var localVarPath = "/charges/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/javascript"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.Add("expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargesRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Charge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Charge) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Charge)));
            
        }

    }
}
