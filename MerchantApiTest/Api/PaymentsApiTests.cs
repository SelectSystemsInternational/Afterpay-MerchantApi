/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;
using RestSharp;

using MerchantApi.Api;
using MerchantApi.Model;

namespace MerchantApi.Test
{
    /// <summary>
    ///  Class for testing OrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PaymentsApiTests
    {
        private AuthorizationApi authorizationApi;
        private PaymentsApi instance;
        
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            authorizationApi = new AuthorizationApi("https://api-sandbox.afterpay.com/v2/");
            authorizationApi.Configuration.MerchantId = "MerchantId";
            authorizationApi.Configuration.MerchantSecretKey = "MerchantSecretKey";
            authorizationApi.Configuration.UserAgent = "Afterpay SDK; .netCore3.1; Test Payments Api";

            var response = authorizationApi.AuthorizationCreateToken();

            instance = new PaymentsApi(authorizationApi.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrdersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OrdersApi
            Assert.IsInstanceOf(typeof(PaymentsApi), instance, "instance is a OrdersApi");
        }

        /// <summary>
        /// Test Payments Get
        /// </summary>
        [Test]
        public void PaymentsGetTest()
        {
            // TODO uncomment below and replace merchant access key to test the basic method

            string id = null;
            string token = null;

            var authorization = authorizationApi.AuthorizationCreateToken();

            token = "001.u0hglki77ko70iuavgnb31vo2qq4ehold53brkdngfj9l73f";

            var response = instance.PaymentGetByToken(token);

            response = instance.PaymentGet(response.Id);

            System.Threading.Thread.Sleep(2000); // Give the system time to complete the creation of the order

            Assert.IsInstanceOf<Payment> (response, "response is Checkout");
        }

        /// <summary>
        /// Test Payments Get By Token
        /// </summary>
        [Test]
        public void PaymentsGetByTokenTest()
        {
            // TODO uncomment below and replace merchant access key to test the basic method

            string paymentToken = null;

            var authorization = authorizationApi.AuthorizationCreateToken();

            paymentToken = "001.u0hglki77ko70iuavgnb31vo2qq4ehold53brkdngfj9l73f";

            var response = instance.PaymentGetByToken(paymentToken);

            Assert.IsInstanceOf<Payment>(response, "response is Payment");
        }

        /// <summary>
        /// Test Payment Update Shipping Courier
        /// </summary>
        [Test]
        public void PaymentUpdateShippingCourier()
        {

            string paymentToken = null;

            var authorization = authorizationApi.AuthorizationCreateToken();

            paymentToken = "001.u0hglki77ko70iuavgnb31vo2qq4ehold53brkdngfj9l73f";

            var response = instance.PaymentGetByToken(paymentToken);

            var courier = new ShippingCourier("2021-01-16T00:00:00Z", "CourierPost", "AA999999999AA", ShippingCourier.PriorityEnum.Standard.ToString());

            instance.PaymentUpdateShippingCourier(response.Id, courier); 

            response = instance.PaymentGetByToken(paymentToken);

            Assert.IsInstanceOf<Payment>(response, "response is Payment");

        }

        /// <summary>
        /// Test Order Update Merchant Reference
        /// </summary>
        [Test]
        public void PaymentUpdateMerchantReference()
        {

            string paymentToken = null;

            var authorization = authorizationApi.AuthorizationCreateToken();

            paymentToken = "001.u0hglki77ko70iuavgnb31vo2qq4ehold53brkdngfj9l73f";

            var response = instance.PaymentGetByToken(paymentToken);

            var reference = new MerchantReference("new_merchan_order_id_1234");

            instance.PaymentUpdateMerchantReference(response.Id, reference);

            response = instance.PaymentGetByToken(paymentToken);

            Assert.IsInstanceOf<Payment>(response, "response is Payment");

        }

        /// <summary>
        /// Test Capture Payment
        /// </summary>
        [Test]
        public void PaymentFullCapture()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string orderToken = null;

            var authorization = authorizationApi.AuthorizationCreateToken();

            orderToken = "001.u0hglki77ko70iuavgnb31vo2qq4ehold53brkdngfj9l73f";

            var capture = new CaptureFull(orderToken, "Capture for Order");

            var captureResponse = instance.PaymentFullCapture(capture);

            Assert.IsInstanceOf<Payment>(captureResponse, "response is Payment");

        }

        /// <summary>
        /// Test Auth Payment
        /// </summary>
        [Test]
        public void PaymentAuth()
        {
            // TODO uncomment below to test the method and replace null with proper value

            string orderToken = null;

            var authorization = authorizationApi.AuthorizationCreateToken();

            orderToken = "001.u0hglki77ko70iuavgnb31vo2qq4ehold53brkdngfj9l73f";

            var auth = new Auth("1", orderToken, "Auth for Order");

            var authResponse = instance.PaymentAuth(auth);

            Assert.IsInstanceOf<Payment>(authResponse, "response is Payment");

        }

        /// <summary>
        /// Test Capture Payment
        /// </summary>
        [Test]
        public void PaymentCapture()
        {
            // TODO uncomment below to test the method and replace null with proper value

            var authorization = authorizationApi.AuthorizationCreateToken();

            var amount = new Money("7.37", "NZD");

            var capture = new Capture("1", "1", amount, "Capture for Order"); // Request Id needs to increas for each partial refund

            var id = "24693468";

            var captureResponse = instance.PaymentCapture(id, capture);

            Assert.IsInstanceOf<Payment>(captureResponse, "response is Payment");

        }

        /// <summary>
        /// Test Refund Payment
        /// </summary>
        [Test]
        public void PaymentRefund()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string id = null;

            string paymentToken = null;

            var authorization = authorizationApi.AuthorizationCreateToken();

            paymentToken = "001.d2hsgmp251rovl7i80ise05pe8ga1h0rh8b2ri4vvqla6hbf";

            var response = instance.PaymentGetByToken(paymentToken);

            var refund = new Refund(response.Id, response.OriginalAmount, "Refund for Order", response.Id, "2021-01-16T00:00:00Z", response.Id);

            var refundResponse = instance.PaymentRefund(response.Id, refund);

            response = instance.PaymentGetByToken(paymentToken);

            Assert.IsInstanceOf<Payment>(response, "response is Payment");

        }

        /// <summary>
        /// Test Void Payment
        /// </summary>
        [Test]
        public void PaymentVoid()
        {
            // TODO uncomment below to test the method and replace null with proper value

            var authorization = authorizationApi.AuthorizationCreateToken();

            var id = "24693468";

            var voidResponse = instance.PaymentVoid(id);

            Assert.IsInstanceOf<Model.Void>(voidResponse, "response is Void");

        }

    }

}
