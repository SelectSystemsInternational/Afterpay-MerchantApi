/* 
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using MerchantApi.Client;
using MerchantApi.Api;
using MerchantApi.Model;

namespace MerchantApi.Test
{
    /// <summary>
    ///  Class for testing ChargesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ChargesApiTests
    {
        private ChargesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChargesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChargesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChargesApi
            Assert.IsInstanceOf(typeof(ChargesApi), instance, "instance is a ChargesApi");
        }

        
        /// <summary>
        /// Test ChargesCancel
        /// </summary>
        [Test]
        public void ChargesCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string id = null;
            string idempotencyKey = null;
            var response = instance.ChargesCancel(id, idempotencyKey);
            Assert.IsInstanceOf<Charge> (response, "response is Charge");
        }
        
        /// <summary>
        /// Test ChargesCapture
        /// </summary>
        [Test]
        public void ChargesCaptureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string id = null;
            CaptureChargeRequest body = null;
            string idempotencyKey = null;
            var response = instance.ChargesCapture(id, body, idempotencyKey);
            Assert.IsInstanceOf<Charge> (response, "response is Charge");
        }
        
        /// <summary>
        /// Test ChargesCreate
        /// </summary>
        [Test]
        public void ChargesCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            CreateChargeRequest body = null;
            string idempotencyKey = null;
            var response = instance.ChargesCreate(body, idempotencyKey);
            Assert.IsInstanceOf<Charge> (response, "response is Charge");
        }
        
        /// <summary>
        /// Test ChargesList
        /// </summary>
        [Test]
        public void ChargesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //int? skip = null;
            //int? limit = null;
            //string expand = null;
            //var response = instance.ChargesList(state, skip, limit, expand);
            //Assert.IsInstanceOf<ChargeCollection> (response, "response is ChargeCollection");
        }
        
        /// <summary>
        /// Test ChargesRetrieve
        /// </summary>
        [Test]
        public void ChargesRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string expand = null;
            //var response = instance.ChargesRetrieve(id, expand);
            //Assert.IsInstanceOf<Charge> (response, "response is Charge");
        }
        
    }

}
