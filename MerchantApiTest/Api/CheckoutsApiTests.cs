/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using MerchantApi.Client;
using MerchantApi.Api;
using MerchantApi.Model;

namespace MerchantApi.Test
{
    /// <summary>
    ///  Class for testing CheckoutsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CheckoutsApiTests
    {
        private AuthorizationApi authorizationApi;
        private CheckoutsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            authorizationApi = new AuthorizationApi("https://api-sandbox.afterpay.com/v2/");
            authorizationApi.Configuration.MerchantId = "41819";
            authorizationApi.Configuration.MerchantSecretKey = "97e7abb094337049f15b5daf1b273e56d09e8cbf9a2d21f50c28092de5590b3534a90448fc5dd8e633a906c6f7d55b86dedcbd69e7e1fe1029dc44385bfe696e";
            authorizationApi.Configuration.UserAgent = "Afterpay SDK; .netCore3.1; Test Checkout Api";

            var response = authorizationApi.AuthorizationCreateToken();

            instance = new CheckoutsApi(authorizationApi.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CheckoutsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CheckoutsApi
            Assert.IsInstanceOf(typeof(CheckoutsApi), instance, "instance is a CheckoutsApi");
        }

        /// <summary>
        /// Create a Test Checkout Request
        /// </summary>
        public OrderDetails CreateCheckoutRequest()
        {
            var phoneNumber = "0200000000";

            var amount = new Money("37.37", "NZD");
            var consumer = new Consumer(phoneNumber, "Given Name", "Surname", "youremail@yourwebsite.com");

            var billing = new Contact("Address Name", "AddressLine1", "AddressLine2", "Area 1", "Area 2", "Region", "9999", "CC", phoneNumber);
            var shipping = new Contact("Address Name", "AddressLine1", "AddressLine2", "Area 1", "Area 2", "Region", "9999", "CC", phoneNumber);

            var courier = new ShippingCourier("2021-01-01T12:00:00", "Courier Name", "Tracking Number", ShippingCourier.PriorityEnum.Standard.ToString());

            var amount1 = new Money("17.17", "NZD");
            var amount2 = new Money("20.20", "NZD");

            string[][] categories1 = { new string[] { "Sporting Goods1", "Climbing Equipment1", "Climbing1" }, new string[] { "Sale1", "Climbing1" } };
            string[][] categories2 = { new string[] { "Sporting Goods2", "Climbing Equipment2", "Climbing2" }, new string[] { "Sale2", "Climbing2" } };

            var item1 = new Item("Item1", "SKU1", 1, "https://www.selectsystems.com.au/afterpay-payment-plugin", "https://www.selectsystems.com.au/afterpay-payment-plugin.image.jpg", amount1, categories1);
            var item2 = new Item("Item2", "SKU2", 2, "https://www.selectsystems.com.au/afterpay-payment-plugin", "https://www.selectsystems.com.au/afterpay-payment-plugin.image.jpg", amount2, categories2);
            
            var items = new List<Item>();
            items.Add(item1);
            items.Add(item2);

            var discountAmount1 = new Money("1.00", "NZD");
            var discountAmount2 = new Money("2.00", "NZD");

            var discount1 = new Discount("Discount1", discountAmount1);
            var discount2 = new Discount("Discount1", discountAmount1);

            var discounts = new List<Discount>();
            discounts.Add(discount1);
            discounts.Add(discount2);

            string RedirectConfirmUrl = "https://orders.yourwebsite.com/confirm";
            string RedirectCancelUrl = "https://orders.yourwebsite.com/cancel";

            var merchant = new Merchant(RedirectConfirmUrl, RedirectCancelUrl);

            var merchantReference = "Reference1";

            var taxAmount = new Money("5.00", "NZD");
            var shippingAmount = new Money("7.00", "NZD");

            var createCheckoutRequest = new OrderDetails(amount, consumer, billing, shipping, courier, items, discounts, merchant, merchantReference, taxAmount, shippingAmount);

            return createCheckoutRequest;
        }

        /// <summary>
        /// Test CheckoutsCreate
        /// </summary>
        [Test]
        public void CheckoutsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            var createCheckoutRequest = CreateCheckoutRequest();

            var response = instance.CheckoutsCreate(createCheckoutRequest);

            var checkout = instance.CheckoutsGet(response.Token);

            Assert.IsInstanceOf<Checkout> (response, "response is Checkout");

            // https://orders.yourwebsite.com/confirm?&status=SUCCESS&orderToken=001.gsafrj9iijmn5t3ti7el4jcm4fuqvgqfecv1j2ulr39fhg08
        }
        
    }

}
